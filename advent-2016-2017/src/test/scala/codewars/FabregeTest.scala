package codewars

import java.math.BigInteger._
import java.math.BigInteger

import org.scalatest.FunSuite

class FabregeTest extends FunSuite {

  import Fabrege._

  private def test(a: Int, b: Int, shouldBe: Int): Unit = {
    assert(height(valueOf(a), valueOf(b)) === valueOf(shouldBe), s"<-> for $a eggs and $b tries")
  }

  private def test(a: String, b: String, shouldBe: String): Unit = {
    assert(height(new BigInteger(a), new BigInteger(b)) == new BigInteger(shouldBe))
  }

  test("testHeight 1") {

    test(0, 14, 0)
    test(2, 0, 0)
    test(2, 1, 1)
    test(1, 51, 51)
    test(4, 7, 98)
    test(2, 14, 105)
    test(3, 15, 575)
    test(7, 20, 137979)
  }

  test("testHeight 2") {

    test(4, 17, 3213)
    test(16, 19, 524096)
    test(23, 19, 524287)
  }

  test("testHeight 3") {

    test("13", "550", "60113767426276772744951355")
    test("271", "550", "1410385042520538326622498273346382708200418583791594039531058458108130216985983794998105636900856496701928202738750818606797013840207721579523618137220278767326000095")
    test("531", "550", "3685510180489786476798393145496356338786055879312930105836138965083617346086082863365358130056307390177215209990980317284932211552658342317904346433026688858140133147")
    test("931", "1750", "63240208341510070286935323206985427950995966772926035147881229080490899902283530094044512580635198503089404776611869491840373082817297887093174276498501601982633005245345252235475386584631804419000989192089207774238230104072608811601540225622122613855294252218843634763494507158978576495757144382517358411548725645444443072985024651502964374750031755777956543531493650280098464956096652554022970807884809581466256207753808907969971860642521844756877065675301399545515963106169802353826744536944762211432363486385432690092301487")
    test("2931", "4750", "78069141555648546782627134412110265240054906740001541134528938168503026296716734351508278470791608270607750407439398284965051006563872101022656464961698478943165282218722833656558875374582541374890429231476920820420490668511603665046195978926315251981622515445758531081007680421319319445204598571660641329783359001902794745640578516701347026021708138375568930887624552413388607994151814572526287814861816764455829705808068330986519569254470259609693143013545150260272437038597460760524365540277043027480823180490521573073045624060138871043442811036031999414072734105315843262229804142123908963413728376280959008930763153306277654355005800069859895182275964988256159789053957519194627526064922994035824293964156601751164331631179516022593572186345317277330047505396077047330812281438525800638003253142352826648048637450375492968462561665427581246779344136555111128477750057080725244915038833245519148279551983716511187121952302700887538069785489318038619958138170718257255950653871244893539805436151763245361119472524088356216371391366551970729692992408573641586562973432379396932327872765683467715579484709490280389508424132884349859003010396649383176321164037902997435610379762134922155261931535111171514986426850796439342607195802812476140395321084046118051538350962199912434526408542391305229589766317002170532309263417254162730849126696080881738421783952700613322914287518642048491717544968469050778240848695562007071173825791")
  }

}
